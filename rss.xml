<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lamentations</title><link>http://perryjer1.github.io/</link><description>"Is it nothing to you, all ye that pass by? behold, and see if there be any sorrow like unto my sorrow"</description><atom:link rel="self" type="application/rss+xml" href="http://perryjer1.github.io/rss.xml"></atom:link><language>en</language><lastBuildDate>Fri, 05 May 2017 19:28:13 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Risk Parity Weights in R</title><link>http://perryjer1.github.io/posts/risk-parity-weights-in-r/</link><dc:creator>Jeremiah Perry</dc:creator><description>&lt;div&gt;&lt;p&gt;Every now and then I need to calculate risk parity weights in R. I
like to know how things are working under the hood and the solutions I
found were a little opaque. Fortunately I found a nice article that
gives a straightforward algorithm,
see &lt;a href="http://www.iinews.com/site/pdfs/joi_fall_2012_ra1.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is my R code to implement it. This is from the "Algorithm 1:
Newton's method" section in the paper.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;riskparity &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sigma&lt;span class="p"&gt;,&lt;/span&gt; tol &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1e-7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; maxeval &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="bp"&gt;F&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    mat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sigma &lt;span class="o"&gt;%*%&lt;/span&gt; x &lt;span class="o"&gt;-&lt;/span&gt; lambda &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;x
    &lt;span class="kp"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  J &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; lambda&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    mat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; sigma &lt;span class="o"&gt;+&lt;/span&gt; lambda &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kp"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;x&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    mat &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;rep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sigma&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="kp"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;mat&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  w &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;sigma&lt;span class="p"&gt;))&lt;/span&gt;
  w &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;w &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;w&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# add guess for lambda at the end&lt;/span&gt;
  N &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;w&lt;span class="p"&gt;)&lt;/span&gt;

  cureval &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;cureval &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; maxeval&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    cureval &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; cureval &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    wn &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; w &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="kp"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;J&lt;span class="p"&gt;(&lt;/span&gt;w&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;],&lt;/span&gt; w&lt;span class="p"&gt;[&lt;/span&gt;N&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;%*%&lt;/span&gt; &lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;w&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;],&lt;/span&gt; w&lt;span class="p"&gt;[&lt;/span&gt;N&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;wn &lt;span class="o"&gt;-&lt;/span&gt; w&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; tol&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;w &lt;span class="o"&gt;=&lt;/span&gt; w&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;],&lt;/span&gt; lambda &lt;span class="o"&gt;=&lt;/span&gt; w&lt;span class="p"&gt;[&lt;/span&gt;N&lt;span class="p"&gt;],&lt;/span&gt; status &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"converge"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    w &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; wn
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;w &lt;span class="o"&gt;=&lt;/span&gt; w&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;],&lt;/span&gt; lambda &lt;span class="o"&gt;=&lt;/span&gt; w&lt;span class="p"&gt;[&lt;/span&gt;N&lt;span class="p"&gt;],&lt;/span&gt; status &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"maxeval"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><guid>http://perryjer1.github.io/posts/risk-parity-weights-in-r/</guid><pubDate>Fri, 05 May 2017 18:50:55 GMT</pubDate></item><item><title>Reading a UTF-8 csv file from Excel</title><link>http://perryjer1.github.io/posts/reading-a-utf-8-csv-file-from-excel/</link><dc:creator>Jeremiah Perry</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently upgraded to Windows 10 at work and the latest and greatest
version of Excel. I went to save a csv file to read into R and did not
realize I selected the "UTF-8" option.&lt;/p&gt;
&lt;p&gt;When I read it into R, I saw three strange extra characters in the
first column name. No expert am I in unicode but I know enough to
recognize this was probably a byte-order mark and just needed to be
read differently.&lt;/p&gt;
&lt;p&gt;I looked at the arg list for &lt;code&gt;read.csv&lt;/code&gt; and tried the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;X &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;,&lt;/span&gt; encoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This seemed very sensible to me since &lt;code&gt;encoding&lt;/code&gt; is pretty standard
for this sort of thing in e.g. python. It did not work and when I
looked closer, I realized there was another argument, &lt;code&gt;fileEncoding&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;X &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;,&lt;/span&gt; fileEncoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Oddly, this did not work either. At this point I started mumbling
incoherently.&lt;/p&gt;
&lt;p&gt;Naturally, Hadley came to my rescue when I read his answer to &lt;a href="http://stackoverflow.com/questions/21624796/read-a-utf-8-text-file-with-bom"&gt;this
StackOverflow question&lt;/a&gt;. 
Seems that in R, the correct "encoding" is "utf-8-bom" where bom
stands for byte order mark:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;X &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read.csv&lt;span class="p"&gt;(&lt;/span&gt;filename&lt;span class="p"&gt;,&lt;/span&gt; fileEncoding &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"utf-8-bom"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;At last. Why do I have to use &lt;code&gt;fileEncoding&lt;/code&gt; instead of just
&lt;code&gt;encoding&lt;/code&gt;, and what does the &lt;code&gt;encoding&lt;/code&gt; variable do anyway? Why do I
have to put "utf-8-bom" instead of just "utf-8"? Why does Excel feel
compelled to put a byte order mark in a UTF-8 file? If I were
industrious and curious, I would find out, but I am lazy and
uninterested so for now it will stay a mystery.&lt;/p&gt;&lt;/div&gt;</description><category>R</category><guid>http://perryjer1.github.io/posts/reading-a-utf-8-csv-file-from-excel/</guid><pubDate>Fri, 28 Apr 2017 13:28:59 GMT</pubDate></item><item><title>Consecutive Composite Numbers</title><link>http://perryjer1.github.io/posts/consecutive-composite-numbers/</link><dc:creator>Jeremiah Perry</dc:creator><description>&lt;div&gt;&lt;p&gt;I recently read that there exist strings of consecutive composite
numbers of arbitrary length. That hurts my head, just a little. So
even though there are infinitely many prime numbers, the gaps between
them can be arbitrarily long.&lt;/p&gt;
&lt;p&gt;To generate a sequence of &lt;code&gt;n&lt;/code&gt; numbers that are composite, take
&lt;code&gt;(n+1)! + 2&lt;/code&gt;, &lt;code&gt;(n+1)! + 3&lt;/code&gt;, ..., up to &lt;code&gt;(n+1)! + n+1&lt;/code&gt;. That has &lt;code&gt;n&lt;/code&gt;
numbers in it and each is composite: the first is divisible by 2, the
second is divisible by 3, etc.&lt;/p&gt;&lt;/div&gt;</description><guid>http://perryjer1.github.io/posts/consecutive-composite-numbers/</guid><pubDate>Thu, 20 Apr 2017 17:57:07 GMT</pubDate></item></channel></rss>